version: 2.1

orbs:
  aws-ecr: circleci/aws-ecr@7.3.0
  aws-cli: circleci/aws-cli@2.0.6

jobs:
  test-frontend:
    docker:
      - image: cimg/node:17.3.0
        environment:
          NODE_ENV: test
    working_directory: ~/cicd

    steps:
      - checkout
      # save cache and install package via npm
      - run:
          name: update-npm
          command: "sudo npm install -g npm@latest"
          working_directory: ~/cicd/frontend/frontend
      - restore_cache:
          keys:
            - dependency-cache-{{ checksum "~/cicd/frontend/frontend/package.json" }}
      - run:
          name: install-env
          command: |
            sudo apt-get update
            sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
            npm install cypress
          working_directory: ~/cicd/frontend/frontend
      - save_cache:
          paths:
            - node_modules
          key:  dependency-cache-{{ checksum "~/cicd/frontend/frontend/package.json" }}

      #test
      - run:
          name: build-tests
          command: |
            npm run dev
            npm run cyrun
          working_directory: ~/cicd/frontend/frontend

  test-backend:
    docker:
      # backend container
      - image: cimg/python:3.7.12
        environment:
          PYTHONUNBUFFERED: 1
          PYTHONDONTWRITEBYTECODE: 1
          PYTHONUTF8: 1
          PIP_DISABLE_PIP_VERSION_CHECK: "on"
          CHOKIDAR_USEPOLLING: true
          DEBUG: False
      # db container
      - image: cimg/mariadb:10.6
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
        environment:
          MYSQL_USER: testuser
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: root
          MYSQL_PASSWORD: password
    working_directory: ~/cicd

    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "~/cicd/backend/requirements.txt" }}
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            pip install --upgrade pip
            pip install -r ../requirements.txt
          working_directory: ~/cicd/backend/webapp
      - save_cache:
          paths:
            - ~/cicd/backend/dump
          key: v1-dependencies-{{ checksum "~/cicd/backend/requirements.txt" }}

      - run:
          name: install dockerize
          command: |
            [ ! -f /usr/local/bin/dockerize ] && wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
            true
          environment:
            DOCKERIZE_VERSION: v0.5.0
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      # setup db
      - run:
          name: create db and table
          command: |
            mkdir ./static
            python manage.py migrate
          working_directory: ~/cicd/backend/webapp
          environment:
            DB_NAME: test
            DB_PORT: 3306
            DB_USER: root
            DB_HOST: mariadb
            DB_PASSWORD: root
            MYAPP_DOMAIN: localhost
            AWS_STORAGE_BUCKET_NAME: ""
            AWS_S3_REGION_NAME: ""

      # run test
      - run:
          name: run test
          command: python manage.py test
          working_directory: ~/cicd/backend/webapp
      - store_artifacts:
          path: /tmp/test-results

  build-and-push-image-frontend:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: AWS_ECR_FRONT
          region: AWS_DEFAULT_REGION
          tag: latest
          path: "./frontend"
          dockerfile: Dockerfile.ci

  build-and-push-image-backend:
    machine:
      image: ubuntu-2004:202010-01
    steps:
      - checkout
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          repo: AWS_ECR_BACK
          region: AWS_DEFAULT_REGION
          tag: latest 
          path: "./backend"
          # dockerfile: Dockerfile
          dockerfile: Dockerfile.ci

workflows:
  version: 2
  test:
    jobs:
      - test-frontend:
          filters:
            branches:
              only: master
      - test-backend:
          filters:
            branches:
              only: master

      # push frontend-docker-image to ECR
      - build-and-push-image-frontend:
          requires:
            - test-frontend
            - test-backend
          filters:
            branches:
              only: master
      - build-and-push-image-backend:
          requires:
            - test-backend
          filters:
            branches:
              only: master
            